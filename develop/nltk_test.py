#! /usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import re
# import string
# import sys
# import logging
import itertools


import nltk
from transliterate import translit, get_available_language_codes

sentence = u"At eight o'clock on Thursday morning...Arthur didn't feel very good."
sentence2 = "Бетон тяжелый, крупность заполнителя 20 мм, класс В15 (М200)Марка бетона по морозостойкости: F150. В качестве крупного заполнителя использован щебень из плотных горных пород. Группа щебня: 3. Содержание фракций в крупном заполнителе: 5 мм - 10 мм: 40%; св. 10 мм до 20 мм: 60%; (Участник указывает две фракции в соответствии с Гост 26633-2012, так как Заказчик указал конкретно, что крупность заполнителя 20 мм) Щебень из осадочных пород. Марка щебня по дробимости: М800 (потеря массы при испытании щебня в сухом состоянии 15% и насыщенном водой состоянии 15%). Содержание пылевидных и глинистых частиц в щебне, % по массе: 1. Содержание в щебне зерен слабых пород, % по массе: 10. Марка щебня по морозостойкости: F150. Содержание в щебне глины в комках, % по массе: 0,25. Класс щебня по Аэфф: 1 (суммарная удельная эффективная активность естественных радионуклидов, Бк/кг: 370). Содержание в щебне зерен пластинчатой (лещадной) и игловатой формы, % по массе: 25. В качестве мелкого заполнителя применен песок природный I класса. Модуль крупности песка, Мк: 2,5. Полный остаток на сите №063, % по массе: 35. Содержание в песке зерен крупностью свыше 5 мм, % по массе: 5. Содержание в песке пылевидных и глинистых частиц, % по массе: 2. Товарный знак (его словесное обозначение) отсутствует. Россия"
tokens = nltk.word_tokenize(sentence)
# print (tokens)

# sent2trans =  translit(sentence2, "ru", reversed=True)
# print (sentence2)
# print (sent2trans)

# tokens = nltk.word_tokenize(sent2trans)
# [
# print (translit(x, "ru"))
# for x in tokens]


tokenizer = nltk.data.load('tokenizers/punkt/english.pickle')
# data = sent2trans
# print (translit(('\n-----\n'.join(tokenizer.tokenize(data))), "ru"))

# tagged = nltk.pos_tag(tokens)
# print (tagged[0:6])

# import nltk_test
# nltk_test.download()

#
# p = "Good morning Dr. Adams. The patient is waiting for you in room number 3."
#
# ppp = nltk.tokenize.sent_tokenize(p)
#
#
# [print(x) for x in ppp]


p = re.compile(u'\.[А-Я]')
# zz = p.findall('12 drummers drumming, 11 pipers piping, 10 lords a-leaping')
#
# [print(x) for x in zz]

# sStr = u'Электроды, тип 1.Диаметр менее 6 мм Э42. Покрытие среднее или толстое. Должны соответствовать ГОСТ (указать). Должны быть изготовлены из низкоуглеродистой или высоколегированной сварочной проволоки и предназначены для сварки током любой полярности с напряжением холостого хода 50 (±5) В. Временное сопротивление разрыву, от 42 кгс/мм². Относительное удлинение, не ниже восемнадцати процентов. Ударная вязкость не ниже 8 кгс•м/см². Содержание серы и фосфора, % не должно быть более 0,040 и 0,045 соответственно. Максимальная рабочая температура, при которой регламентированы показатели длительной прочности наплавленного металла и металла шва, не ниже 450°С. Длина электрода не менее 300 мм. Максимальный линейный размер поры или шлакового включения до 1,5 мм. Отношение диаметра покрытия к диаметру стержня электрода (D/d) 1,2<D/d≤1,8. Форма зачистки покрытия со стороны контактного торца электрода должна быть конусной, округлой, переходной между конусной и округлой. Разность толщины покрытия в диаметрально противоположных участках электрода < 0,36 мм. Длина зачищенного от покрытия конца > 20 мм.'
sStr = u'Бетон тяжелый, класс В10 (М150) максимальная крупность заполнителя – 20 мм; марка используемого щебня из осадочных пород 800; содержание пылевидных и глинистых частиц в щебне из осадочных пород - 2% по массе, содержание зерен пластинчатой (лещадной) и игловатой формы в крупном заполнителе 25% по массе; содержание слоистых силикатов (слюды, гидрослюды, хлориты и др., являющиеся породообразующими минералами) - 15% по объему, содержание галоидов (галит, сильвин и др.), включающие водорастворимые хлориды, в пересчете на ион хлора – 0,1% по массе, содержание свободного волокна асбеста - 0,25% по массе, содержание зерен слабых пород в щебне 10% по массе; средняя плотность зерен мелкого заполнителя 2500 кг/м3; средняя плотность зерен крупного заполнителя 2500 кг/м3; модуль крупности песка 1,6; средняя прочность бетона (сжатие) 131 кгс/см2, соответствует требованиям ГОСТ 26633-2012. В качестве мелкого заполнителя песок природный для строительных работ мелкий; зерновой состав I, модуль крупности 1,6, полный остаток песка на сите с сеткой N 063 25; удельная эффективность естественных радионуклидов 170 Бк/кг; содержание пылевидных и глинистых частиц, 3 процентов по массе; содержание глины в комках, 0,35 процентов по массе, содержание зерен крупностью свыше 10 мм. 0,5 процентов по массе, содержание зерен крупностью свыше 5 мм. - 5 процентов по массе, содержание зерен крупностью менее 0,15 мм 10 процентов по массе, содержание: аморфных разновидностей диоксида кремния, растворимого в щелочах (халцедон, опал, кремень и др.) - 50 ммоль/л; серы, сульфидов, кроме пирита (марказит, пирротин и др.) и сульфатов (гипс, ангидрит и др.) в пересчете на SO3 - 1,0%; пирит в пересчете на SO3 - 4% по массе; слюда - 2% по массе; галлоидные соединения (галит, сильвин и др.), включающие в себя водорастворимые хлориды, в пересчете на ион хлора - 0,15% по массе; уголь - 1% по массе, соответствует требованиям ГОСТ 8736-2014.Россия, Товарный знак (его словесное обозначение) отсутствует.'
sStr = re.sub("[\s\xA0]+", " ", sStr)

def loopIter(str):
    for match in p.finditer(str):
        return str[:match.span()[1]].replace(match.group(),'. '+match.group()[1])+str[match.span()[1]:]

loopIter(sStr)
print ('done')

emptyStr = ['.','. ','','[newline]']

def sent_splitter(source):
  sentences = []
  SPLIT = re.compile("\. |\n")
  sentences.extend(re.split(SPLIT, source))
  return [s for s in sentences if s not in emptyStr]

sArr = sent_splitter(sStr+" ")
print ("1---------------------------",len(sArr))
[print(x+".") for x in sArr]

while len(re.findall(p, sStr))>0:
    sStr = loopIter(sStr)

sArr = sent_splitter(sStr+" ")
print ("2---------------------------",len(sArr))
[print(x+".") for x in sArr]